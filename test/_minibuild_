-- ROOT --

with File := file("_minibuild_"):open("r") do
	loop
		var Line := while File:read
		print('Line = {Line:length}: {Line}')
	end
	File:close
end

PLATFORM := defined("PLATFORM")
OS := defined("OS")
DEBUG := defined("DEBUG")

if not PLATFORM then
	PLATFORM := shell("uname")[1, -1]
end

if not OS then
	if PLATFORM = "Linux" then
		var File := open("/etc/os-release", "r"), Line
		loop while Line := File:read
			if Line[1, 4] = "ID=" then
				OS := Line[4, 0]
				exit
			end
		end
		File:close
	end
end

print('PLATFORM = {PLATFORM}\n')
print('OS = {OS}\n')

CFLAGS := ['-O3']
LDFLAGS := []

c_compile := fun(Object) do
	var Source := Object % "c"
	execute('gcc -c {CFLAGS} -o{Object} -I{Source:dir} {Source}')
end

c_includes := fun(Source) do
	var Files := []
	var Lines := shell('gcc -c {CFLAGS} -I{Source:dir} -M -MG {Source}')
	var Files := Lines:replace("\\\\\n", ""):replace("\\\\ ", "!SPACE!"):trim / " "
	for File in Files do
		File := file(File:replace("!SPACE!", " "))
	end
	return Files
end

SourceTypes := {
	"c" is [c_includes, c_compile]
}

c_program := fun(Executable, Objects, Libraries) do
	Objects := Objects or []
	Libraries := Libraries or []
	var Sources := []
	for Object in Objects do
		for Extension, Functions in SourceTypes do
			var Source := Object % Extension
			if Source:exists then
				Sources:put(Source)
				var Scan := Source:scan("INCLUDES") => Functions[1]
				Object[Source, Scan] => Functions[2]
				exit
			end
		end
	end
	Executable[Objects, Libraries] => fun(Executable) do
		execute('gcc', '-o', Executable, Objects, Libraries, LDFLAGS)
		DEBUG or execute('strip', Executable)
	end
	DEFAULT[Executable]
end

vmount("obj", "src")
subdir("obj")

meta("TEST") => fun() do
	print('Version = {VERSION}\n')
end
